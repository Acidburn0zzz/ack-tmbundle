<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveModifiedFiles</string>
	<key>bundleUUID</key>
	<string>5A9D4FC6-6CBE-11D9-A21B-000D93589AF6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -rcgi

# By Henrik Nyh &lt;http://henrik.nyh.se&gt; 2007-06-26
# Free to modify and redistribute with credit.

# Includes some minor modifications by Max &lt;http://max.xaok.org/webtek&gt; 2007-08-01
# Adds search UI plus some minor modifications by Robert Thurnher &lt;http://soup.robert42.com&gt; 2007-08-11
# Note: put GrepInProjectSearch.nib into /Applications/TextMate.app/Contents/SharedSupport/Support/nibs/
# Further modifications by Trevor Squires 
#
%w{ui web_preview escape}.each { |lib| require "%s/lib/%s" % [ENV['TM_SUPPORT_PATH'], lib] }

SUPPORT_PATH = ENV['TM_BUNDLE_SUPPORT']
DIALOG = ENV['DIALOG']

NAME = "Ack in Project"
HEAD  = &lt;&lt;-HTML
  &lt;style type="text/css"&gt;
    table { font-size:0.9em; border-collapse:collapse; border-bottom:1px solid #555; }
    h2 { font-size:1.3em; }
    tr { background:#FFF; }
    tr.odd { background:#EEE; }
    td { vertical-align:top; white-space:nowrap; padding:0.4em 1em; color:#000 !important; }
    tr td:first-child { text-align:right; padding-right:1.5em; }
    td a { color:#00F !important; }
    tr.binary { background:#E8AFA8; }
    tr.binary.odd { background:#E0A7A2; }
    tr#empty { border-bottom:1px solid #FFF; }
    tr#empty td { text-align:center; }
    tr.newFile, tr.binary { border-top:1px solid #555; }
    .keyword { font-weight:bold; background:#F6D73A; margin:0 0.1em; }
    .ellipsis { color:#777; margin:0 0.5em; }
  &lt;/style&gt;
  &lt;script type="text/javascript"&gt;
    function reveal_file(path) {
      const quote = '"';
      const command = "osascript -e ' tell app "+quote+"Finder"+quote+"' " +
                        " -e 'reveal (POSIX file " +quote+path+quote + ")' " +
                        " -e 'activate' " + 
                      " -e 'end' ";
      TextMate.system(command, null);
    }

  function findPos(obj) {
    var curleft = curtop = 0;
    if (obj.offsetParent) {
      curleft = obj.offsetLeft
      curtop = obj.offsetTop
      while (obj = obj.offsetParent) {
        curleft += obj.offsetLeft
        curtop += obj.offsetTop
      }
    }
    return {left: curleft, top: curtop};
  }
  
  function resizeTableToFit() {
    var table = document.getElementsByTagName("table")[0];
    const minWidth = 450, minHeight = 250;

    var pos = findPos(table);
    var tableFitWidth = table.offsetWidth + pos.left * 2;
    var tableFitHeight = table.offsetHeight + pos.top + 50;
    var screenFitWidth = screen.width - 150;
    var screenFitHeight = screen.height - 150;

    var setWidth = tableFitWidth &gt; screenFitWidth ? screenFitWidth : tableFitWidth;
    var setHeight = tableFitHeight &gt; screenFitHeight ? screenFitHeight : tableFitHeight;  
    setWidth = setWidth &lt; minWidth ? minWidth : setWidth;
    setHeight = setHeight &lt; minHeight ? minHeight : setHeight;

    window.resizeTo(setWidth, setHeight);
  }
  
  &lt;/script&gt;
HTML

RESIZE_TABLE = &lt;&lt;-HTML
  &lt;script type="text/javascript"&gt;
    resizeTableToFit();
  &lt;/script&gt;
HTML

def ellipsize_path(path)
  path.sub(/^(.{30})(.{10,})(.{30})$/) { "#$1⋯#$3" }
end

def escape(string)
  CGI.escapeHTML(string)
end

def bail(message)
  puts &lt;&lt;-HTML
    &lt;h2&gt;#{ message }&lt;/h2&gt;
  HTML
  html_footer
  exit
end

directory = ENV['TM_SELECTED_FILE'] || ENV['TM_PROJECT_DIRECTORY'] || 
            ( ENV['TM_FILEPATH'] &amp;&amp; File.dirname(ENV['TM_FILEPATH']) )

directory = if File.file? directory then
   ENV['TM_PROJECT_DIRECTORY']
else
   directory
end

searched_in = directory.gsub(/^#{ENV['TM_PROJECT_DIRECTORY']}/, File.basename(ENV['TM_PROJECT_DIRECTORY']))

puts html_head(
  :window_title =&gt; NAME,
  :page_title   =&gt; NAME,
  :sub_title    =&gt; directory || "Error",
  :html_head    =&gt; HEAD
)

bail("Not in a saved file") unless directory

tm_dialog_command = %{#{DIALOG} --center --parameters '{ ignoreCaseBoolean = 1; fileTypeString = "*.*"; }' '#{SUPPORT_PATH}/nibs/AckInProjectSearch.nib'}

plist = OSX::PropertyList.load(IO.popen(tm_dialog_command))

query = plist['searchString']
file_type = plist['fileTypeString']
use_extended_regexp = plist['useExtendedRegularExpressionBoolean']
ignore_case = plist['ignoreCaseBoolean']

if !file_type
  file_type = '*.*'
end
file_type = file_type.gsub(/\s/, '')
if !file_type.match(/,/)
  include_flags = %{ --include='#{file_type}' }
else
  file_types = file_type.split(',')
  include_flags = ' '
  for f in file_types
    include_flags += %{--include='#{f}' }
  end
end
if (ignore_case == '1')
  ignore_case = 1
end
use_extended_regexp == 1 ? pattern_interpretation_flag = ' --extended-regexp' : pattern_interpretation_flag = ' --fixed-strings'
(ignore_case == 1 &amp;&amp; (!use_extended_regexp || use_extended_regexp == 0)) ? ignore_case_flag = '--ignore-case' : ignore_case_flag = ''

bail("Search aborted") unless query

puts &lt;&lt;-HTML
  &lt;h2&gt;Searching for “#{ escape(query) }” in #{ searched_in }&lt;/h2&gt;
  &lt;table&gt;
HTML

# TODO: Respect ENV['TM_SELECTED_FILES']
command = %{cd "#{directory}"; ack -H --nogroup --nocolor #{e_sh query}}

IO.popen(command) do |pipe|

  # Used to highlight matches
  if (use_extended_regexp == 1)
    query_re = Regexp.new(query)
  elsif (ignore_case == 0 &amp;&amp; (!use_extended_regexp || use_extended_regexp == 0))
    query_re = Regexp.new( Regexp.escape(CGI.escapeHTML(query)) )
  else
    query_re = Regexp.new( Regexp.escape(CGI.escapeHTML(query)), Regexp::IGNORECASE)
  end

  last_path = path = i = nil
  pipe.each_with_index do |line, i|

    if line =~ /^(Binary file )(.*?) matches/
      prefix, file = $1, $2
      path = directory + '/' + file
      puts &lt;&lt;-HTML
        &lt;tr class="binary #{ 'odd' unless i%2==0 }"&gt;
          &lt;td&gt;
            #{ prefix }
            &lt;a href="javascript:reveal_file('#{ escape(path) }')" title="#{ escape(path) }"&gt;#{ ellipsize_path(file) }&lt;/a&gt;
          &lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
        &lt;/tr&gt;
        #{ RESIZE_TABLE if i%100==0 }
      HTML
      next
    end

    line.gsub!(/^([^:]+):(\d+):(.*)$/) do

      relative_path, line_number, content = $1, $2, $3.strip
      path = directory + '/' + relative_path
      url = "txmt://open/?url=file://#{path}&amp;line=#{line_number}"
      
      content = escape(content).
                  # Highlight keywords
                  gsub(query_re) { %{&lt;strong class="keyword"&gt;#$&amp;&lt;/strong&gt;} }.
                  # Ellipsize before, between and after keywords
                  gsub(%r{(^[^&lt;]{25}|&lt;/strong&gt;[^&lt;]{15})([^&lt;]{20,})([^&lt;]{15}&lt;strong|[^&lt;]{25}$)}) do
                    %{#$1&lt;span class="ellipsis" title="#{escape($2)}"&gt;⋯&lt;/span&gt;#$3}
                  end
      &lt;&lt;-HTML

        &lt;tr class="#{ 'odd' unless i%2==0 } #{ 'newFile' if (path != last_path) }"&gt;
          &lt;td&gt;
            &lt;a href="#{ url }" title="#{ "%s:%s" % [path, line_number] }"&gt;
              #{ "%s:%s" % [ellipsize_path(relative_path), line_number] }
            &lt;/a&gt;
          &lt;/td&gt;
          &lt;td&gt;#{ content }&lt;/td&gt;
        &lt;/tr&gt;

      HTML
    end
    puts line
    last_path = path

  end

  if i
    # A paragraph inside the table ends up at the top even though it's output
    # at the end. Something of a hack 
    i += 1
    puts &lt;&lt;-HTML
      &lt;p&gt;#{i} matching line#{i==1 ? '' : 's'}:&lt;/p&gt;
      #{RESIZE_TABLE}
    HTML
  else
    puts &lt;&lt;-HTML
      &lt;tr id="empty"&gt;&lt;td colspan="2"&gt;No results.&lt;/td&gt;&lt;/tr&gt;
    HTML
  end
    
end

puts &lt;&lt;-HTML
&lt;/table&gt;
HTML

html_footer
</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>@F</string>
	<key>name</key>
	<string>Ack in Project</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>3B7E16C9-0D34-42D4-8431-06CB7D819655</string>
</dict>
</plist>
